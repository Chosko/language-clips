'.source.clips':
  defrule:
    prefix: 'defrule'
    body: 'defrule ${1:name}\n\t($2)\n\t=>\n\t\n'
  deffunction:
    prefix: 'deffunction'
    body: 'deffunction ${1:name}(?${2:param1})\n\t($3)\n'
  defmodule:
    prefix: 'defmodule'
    body: 'defmodule ${1:name} (import ${2:module} ${3:?ALL}) (export ${4:?ALL})'
  deffacts:
    prefix: 'deffacts'
    body: 'deffacts ${1:name}\n\t($2)\n'
  defclass:
    prefix: 'defclass'
    body: 'defclass ${1:name} (is-a ${2:USER})\n\t(slot $3)\n'
  deftemplate:
    prefix: 'deftemplate'
    body: 'deftemplate ${1:name}\n\t($2)\n'
  slot:
    prefix: 'slot'
    body: 'slot ${1:name} ($2)'
  'allowed-values':
    prefix: 'allowed-values'
    body: 'allowed-values ${1:value}'
  default:
    prefix: 'default'
    body: 'default ${1:value}'
  declare:
    prefix: 'declare'
    body: 'declare (salience ${1:0})'
  assert:
    prefix: 'assert'
    body: 'assert\n\t($1)\n'
  retract:
    prefix: 'retract'
    body: 'retract ?${1:fact}'
  modify:
    prefix: 'modify'
    body: 'modify ?${1:var}\n\t($2)\n'
  not:
    prefix: 'not'
    body: 'not\n\t($1)\n'
  not:
    prefix: 'not'
    body: 'not\n\t($1)\n'
  and:
    prefix: 'and'
    body: 'and\n\t($1)\n\t($2)\n'
  or:
    prefix: 'or'
    body: 'or\n\t($1)\n\t($2)\n'
