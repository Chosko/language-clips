scopeName: "source.clips"
fileTypes: [
  'clp',
  'CLP'
]
name: 'CLIPS'
patterns: [

  # Deftemplate construct
  {
    comment: 'deftemplate construct'
    begin: '(\\()[\\s\\t]*(deftemplate)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'entity.name.class.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      # Slot
      {
        comment: 'single slot definition'
        begin: '(\\()[\\s\\t]*(slot|multislot)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)'
        beginCaptures:
          '1':
            name: 'storage.function.clips'
          '2':
            name: 'storage.function.clips'
          '3':
            name: 'entity.name.variable.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.function.clips'
        patterns: [

          # Slot modifier
          {
            comment: 'slot modifier'
            begin: '(\\()[\\s\\t]*(allowed\\-values|type|allowed\\-symbols|default|default\\-dynamic)(?!-)\\b'
            beginCaptures:
              '1':
                name: 'support.function.clips'
              '2':
                name: 'support.function.clips'
            end: '(\\))'
            endCaptures:
              '1':
                name: 'support.function.clips'
            patterns: [
              {
                include: '#common'
              }
            ]
          }
          {
            include: '#common'
          }
        ]
      }
      {
        include: '#common'
      }
    ]
  }

  # Defrule construct
  {
    comment: 'defrule construct'
    begin: '(\\()[\\s\\t]*(defrule)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'support.class.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      # declare
      {
        comment: 'declare modifier'
        begin: '(\\()[\\s\\t]*(declare)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'storage.function.clips'
          '2':
            name: 'storage.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.function.clips'
        patterns: [
          # salience
          {
            comment: 'salience|auto-focus modifier'
            begin: '(\\()[\\s\\t]*(salience|auto\\-focus)(?!-)\\b'
            beginCaptures:
              '1':
                name: 'support.function.clips'
              '2':
                name: 'support.function.clips'
            end: '(\\))'
            endCaptures:
              '1':
                name: 'support.function.clips'
            patterns: [
              {
                include: '#expressions'
              }
              {
                include: '#common'
              }
            ]
          }
          {
            include: '#common'
          }
        ]
      }
      {
        include: '#conditionalElements'
      }
      {
        comment: 'arrow'
        match: '=>'
        name: 'storage.class.clips'
      }
      {
        include: '#actions'
      }
      {
        include: '#functions'
      }
      {
        include: '#facts'
      }
      {
        include: '#common'
      }
    ]
  }

  # Deffunction construct
  {
    comment: 'deffunction construct'
    begin: '(\\()[\\s\\t]*(deffunction)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'entity.name.function.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      {
        include: '#actions'
      }
      {
        include: '#functions'
      }
      {
        include: '#facts'
      }
      {
        include: '#common'
      }
    ]
  }

  # Defclass construct
  {
    comment: 'defclass construct'
    begin: '(\\()[\\s\\t]*(defclass)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'entity.name.function.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      {
        include: '#actions'
      }
      {
        include: '#functions'
      }
      {
        include: '#facts'
      }
      {
        include: '#common'
      }
    ]
  }

  # Deffacts construct
  {
    comment: 'deffacts construct'
    begin: '(\\()[\\s\\t]*(deffacts)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'entity.name.class.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      {
        include: '#orderedFacts'
      }
      {
        include: '#facts'
      }
      {
        include: '#common'
      }
    ]
  }

  # Defmodule construct
  {
    comment: 'defmodule construct'
    begin: '(\\()[\\s\\t]*(defmodule)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)\\b'
    beginCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
      '2':
        name: 'punctuation.definition.string.begin.clips'
      '3':
        name: 'entity.name.class.clips'
    end: '(\\))'
    endCaptures:
      '1':
        name: 'punctuation.definition.string.begin.clips'
    patterns: [
      {
        comment: 'import'
        begin: '(\\()[\\s\\t]*(import)[\\s\\t]+([a-zA-Z_][\\w$\\-]*)'
        beginCaptures:
          '1':
            name: 'support.function.clips'
          '2':
            name: 'support.function.clips'
          '3':
            name: 'variable.parameter.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'support.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
          {
            include: '#common'
          }
        ]
      }
      {
        comment: 'export'
        begin: '(\\()[\\s\\t]*(export)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'support.function.clips'
          '2':
            name: 'support.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'support.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
          {
            include: '#common'
          }
        ]
      }
      {
        include: '#common'
      }
    ]
  }
  {
    include: '#common'
  }
  {
    include: '#expressions'
  }
]

# Common syntax
repository:
  common:
    patterns: [
      {
        include: '#emptyBraces'
      }
      {
        include: '#illegalBraces'
      }
      {
        include: '#comments'
      }
    ]
  numbers:
    patterns: [
      {
        match: '-?\\b[0-9]+\\b'
        name: 'constant.numeric.clips'
      }
    ]
  booleans:
    patterns: [
      {
        match: '\\b(TRUE|FALSE)\\b'
        name: 'constant.numeric.clips'
      }
    ]
  emptyBraces:
    patterns: [
      comment: 'empty braces'
      match: '\\([\\s\\t]*\\)'
      name: 'variable.language.clips'
    ]
  illegalBraces:
    patterns: [
      comment: 'illegal braces'
      match: '(\\(|\\))'
      name: 'invalid.illegal.clips'
    ]
  comments:
    patterns: [
      {
        begin: '(;)'
        beginCaptures:
          '1':
            name: 'punctuation.semicolon.comment.clips'
        end: '\\n'
        name: 'comment.line.clips'
      }
    ]
  variables:
    patterns: [
      {
        match: '(^\\?|\\s\\?|(?<=\\()\\?)([a-zA-Z_][\\w$\\-]*)'
        captures:
          '1':
            name: 'variable.language.clips'
          '2':
            name: 'constant.numeric.clips'
      }
    ]
  expressions:
    patterns: [
      {
        include: '#functions'
      }
      {
        include: '#facts'
      }
      {
        include: '#variables'
      }
      {
        include: '#numbers'
      }
      {
        include: '#booleans'
      }
      {
        include: '#symbols'
      }
      {
        include: '#common'
      }
    ]
  symbols:
    patterns: [
      {
        match: '[&|]'
        name: 'storage.function.clips'
      }
    ]
  functions:
    patterns: [
      {
        begin: '(=|&:)?(\\()([+\\-*/<>=]+)'
        beginCaptures:
          '1':
            name: 'storage.function.clips'
          '2':
            name: 'storage.function.clips'
          '3':
            name: 'storage.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
        ]
      }
      {
        begin: '(=|&:)?(\\()(abs|log|log10|exp|round|mod|sqrt|div|min|max|float|integer|cos|sin|cot|tan|sec|csc|acos|asin|acot|atan|asec|acsc|cosh|sinh|coth|tanh|sech|csch|acosh|asinh|acoth|atanh|asech|acsch|grad-deg|rad-deg)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'storage.function.clips'
          '2':
            name: 'storage.function.clips'
          '3':
            name: 'storage.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
        ]
      }
      {
        begin: '(=|&:)?(\\()(find\\-all\\-facts|find\\-fact|fact\\-slot\\-value|length|nth|eq|neq)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'support.function.clips'
          '2':
            name: 'support.function.clips'
          '3':
            name: 'support.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'support.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
        ]
      }
      {
        begin: '(=|&:)?(\\()(test|bind|do\\-for\\-all\\-facts|do\\-for\\-fact|if|while|printout|and|or)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'entity.name.variable.language.clips'
          '2':
            name: 'entity.name.variable.language.clips'
          '3':
            name: 'entity.name.variable.language.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'entity.name.variable.language.clips'
        patterns: [
          {
            include: '#expressions'
          }
        ]
      }
      {
        begin: '(=|&:)?(\\()(return)'
        beginCaptures:
          '1':
            name: 'storage.function.clips'
          '2':
            name: 'storage.function.clips'
          '3':
            name: 'storage.function.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.function.clips'
        patterns: [
          {
            include: '#expressions'
          }
        ]
      }
      {
        include: '#conditionalElements'
      }
      {
        include: '#actions'
      }
    ]
  facts:
    patterns: [
      {
        begin: '(?:(^\\?|\\s\\?)([a-zA-Z_][\\w$\\-]*)[\\s\\t]*(<-)[\\s\\t]*)?(\\()'
        beginCaptures:
          '1':
            name: 'variable.language.clips'
          '2':
            name: 'constant.numeric.clips'
          '3':
            name: 'variable.language.clips'
          '4':
            name: 'punctuation.definition.string.begin.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'punctuation.definition.string.begin.clips'
        patterns: [
          {
            include: '#functions'
          }
          {
            comment: 'ordered fact inner'
            begin: '(\\()'
            beginCaptures:
              '1':
                name: 'support.function.clips'
            end: '(\\))'
            endCaptures:
              '1':
                name: 'support.function.clips'
            patterns: [
              {
                include: '#expressions'
              }
            ]
          }
          {
            include: '#expressions'
          }
        ]
      }
    ]
  conditionalElements:
    patterns: [
      {
        begin: '(\\()[\\s\\t]*(or|not|and|exists|forall|logical)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'variable.language.clips'
          '2':
            name: 'variable.language.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'variable.language.clips'
        patterns: [
          {
            include: '#conditionalElements'
          }
          {
            include: '#functions'
          }
          {
            include: '#facts'
          }
          {
            include: '#common'
          }
        ]
      }
    ]
  actions:
    patterns: [
      {
        begin: '(\\()[\\s\\t]*(assert|retract|modify|focus|pop-focus)(?!-)\\b'
        beginCaptures:
          '1':
            name: 'storage.functions.clips'
          '2':
            name: 'storage.functions.clips'
        end: '(\\))'
        endCaptures:
          '1':
            name: 'storage.functions.clips'
        patterns: [
          {
            include: '#facts'
          }
          {
            include: '#expressions'
          }
        ]
      }
    ]
